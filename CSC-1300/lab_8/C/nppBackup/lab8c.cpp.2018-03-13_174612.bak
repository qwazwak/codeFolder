/*
	This program will:
		read in prices and store them into a two-dimensional array.
		It will print those prices in a table form.

	By Rus Hoffman
	Partner: Dalton Minon
*/
#define _WIN64 1 //(also WIN64, __WIN64, and __WIN64__)
#define __MINGW64__ 1
#define __x86_64 1 //(also __x86_64__)
#define __amd64 1 //(also __amd64__)

#include <windows.h>
#include <iostream>
#include <iomanip>
#include <fstream>

using namespace std;


const long int MAXROWS = 10;
const long int MAXCOLS = 10;

typedef double PriceType [MAXROWS][MAXCOLS]; 

//void getPrices(double [][MAXCOLS], int&, int&); // gets the prices into the array 
//void printPrices(const double [][MAXCOLS], int, int); // prints data as a table


double findAverage2D(double array[MAXCOLS][MAXROWS], int sizeWide, int sizeTall){
	double sum = 0; // holds the sum of all the numbers 
	for (int y = 0; y < sizeTall; y++){
		for (int x = 0; x < sizeWide; x++){
			sum = sum + array[y][x];
		}
	}
	return (sum / (sizeTall * sizeTall)); //returns the average
}


double findHighest2D(double array[MAXCOLS][MAXROWS], int sizeWide, int sizeTall){
	double currentMax = array[0][0];
	for(int y = 0; y < sizeTall; y = y + 1){
		for(int x = 0; x < sizeWide; x = x + 1){
			if(array[y][x] > currentMax){
				currentMax = array[y][x];
			}
		}
	}
	return currentMax;
}

double findLowest2D(double array[MAXCOLS][MAXROWS], int sizeWide, int sizeTall){
	double currentMin = array[0][0];
	for(int y = 0; y < sizeTall; y = y + 1){
		for(int x = 0; x < sizeWide; x = x + 1){
			if(array[y][x] < currentMin){
				currentMin = array[y][x];
			}
		}
	}
	return currentMin;
}

// getPrices
	// task: This procedure asks the user to input the number of rows and
	// columns. It then asks the user to input (rows * columns) number of
	// prices. The data is placed in the array.
	// Precondition : none
	// Postcondition : an array filled with numbers and the number of rows
	// and columns used.
void getPrices(double table[MAXROWS][MAXCOLS], int& numOfRows, int& numOfCols){
	double tempnum;
	do{
		cout << "Please enter the number of rows. This can be an integer from 1 to " << MAXROWS << endl;
		cin >> numOfRows;
		if(cin.fail() || numOfRows < 1 || numOfRows > MAXROWS){
			cin.clear();
			cin.ignore();
			cout << "Invalid entry" << endl;
		}
	}while(cin.fail() || numOfRows < 1 || numOfRows > MAXROWS);
	
	do{
		cout << "Please enter the number of columns. This can be an integer from 1 to " << MAXCOLS << endl;
		cin >> numOfCols;
		if(cin.fail() || numOfCols < 1 || numOfCols > MAXCOLS){
			cin.clear();
			cin.ignore();
			cout << "Invalid entry" << endl;
		}
	}while(cin.fail() || numOfCols < 1 || numOfCols > MAXCOLS);
	
	
	for (unsigned int y = 0; y < numOfRows; y = y + 1){
		for (unsigned int x = 0; x < numOfCols; x = x + 1){
			cout << "Please enter the value for:" << endl;
			cout << "Row " << y + 1 << ", column " << x + 1 << ": ";
			cin >> tempnum;
			while(cin.fail()){
				cin.clear();
				cin.ignore();
				cout << "Invalid entry, enter a number" << endl;
				cout << "Please enter the value for:" << endl;
				cout << "Row " << y + 1 << ", column " << x + 1 << ": ";
				cin >> tempnum;
			}
			table[y][x] = tempnum;
		}
	}
}


// printPrices
	// task: This procedure prints the table of prices
	// Precondition : an array of floating point numbers and the number of rows
	// and columns used.
	// Postcondition : none
void printPrices(const double table[MAXROWS] [MAXCOLS], int numOfRows, int numOfCols){
	cout << fixed << showpoint << setprecision(2);
	for (int row = 0; row < numOfRows; row++){
		for (int col = 0; col < numOfCols; col++){
			cout << table[row][col] << "      " ;
		}
		cout << endl;
	}
}


int main(){
	int rowsUsed; // holds the number of rows used
	int colsUsed; // holds the number of columns used
	PriceType priceTable; // a 2D array holding the prices
	getPrices(priceTable, rowsUsed, colsUsed); // calls getPrices to fill the array 
	printPrices(priceTable, rowsUsed, colsUsed);// calls printPrices to display array
	cout << "The average value is: " << findAverage2D(priceTable, colsUsed, rowsUsed) << endl;
	cout << "The maximum value is: " << findHighest2D(priceTable, colsUsed, rowsUsed) << endl;
	cout << "The minimum value is: " << findLowest2D(priceTable, colsUsed, rowsUsed) << endl;
	
	system("pause");
	return 0;
}